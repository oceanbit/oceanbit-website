<div id="rev-increase-container" class="container">
  <div class="outerBarContainer">
    <div class="barTopText">
      <p>Cut costs</p>
      <p>from $130k to <strong>$80k</strong></p>
    </div>
    <div class="barContainer">
      <div class="bar dark"></div>
      <div class="bar light"></div>
      <div class="bar pinstripes"></div>
    </div>
  </div>
  <div class="metrics-list">
    <div>
      <p class="metric-name">Operational</p>
      <p class="metric-cost" id="rev-metric-operational">$60k</p>
    </div>

    <div>
      <p class="metric-name">Server</p>
      <div style="position: relative">
        <p
          class="metric-cost"
          style="position: absolute; top: 0; left: 0;"
          id="rev-metric-server"
        >
          $20k
        </p>
        <p aria-hidden="true" class="metric-cost" style="opacity: 0">$20k</p>
      </div>
    </div>

    <div>
      <p class="metric-name">Saved</p>
      <p class="metric-cost" id="rev-metric-saved">$50k</p>
    </div>
  </div>
</div>

<style lang="scss">
  .container {
    flex-grow: 1;
  }

  .barTopText {
    display: flex;
    justify-content: space-between;
    margin-bottom: var(--spacing-sm);
    color: var(--colors-label-label-secondary-500, #697586);

    /* Text xs/Normal */
    font-family: var(--Family-Body, "Geist variable");
    font-size: var(--Size-Text-xs, 0.75rem);
    font-style: normal;
    font-weight: 400;
    line-height: var(--Line-height-Text-xs, 1.125rem); /* 150% */
  }

  .barTopText {
    margin: 0;
  }

  .barContainer {
    height: fit-content;
    display: flex;
    align-items: flex-start;
    gap: var(--spacing-lg, 12px);
    align-self: stretch;
  }

  .bar {
    border-radius: var(--radius-xs, 4px);
    box-shadow:
      0px 15px 6px 0px rgba(245, 250, 255, 0.02),
      0px 8px 5px 0px rgba(245, 250, 255, 0.08),
      0px 4px 4px 0px rgba(245, 250, 255, 0.14),
      0px 1px 2px 0px rgba(245, 250, 255, 0.16),
      0px 2px 5px 0px rgba(148, 209, 255, 0.4);
    height: 24px;
  }

  .container:hover {
    .light {
      width: 20px;
    }

    .pinstripes {
      width: 200px;
    }
  }

  .dark,
  .light,
  .pinstripes {
    transition: all 0.3s;
  }

  .dark {
    background: var(--colors-brand-500, #0098ff);
    flex-grow: 1;
    width: 1px;
  }

  .light {
    background: #48d8ff;
    width: 47px;
  }

  .pinstripes {
    width: 81px;
    background-image: url("/pinstripe_horiz_repeat.svg");
    background-size: cover;
    background-repeat: repeat-x;
  }

  .metrics-list {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    margin-top: var(--spacing-4xl);
  }

  .metric-name {
    margin: 0;
    color: var(--colors-label-label-secondary-500, #697586);

    /* Text xs/Normal */
    font-family: var(--family-body, "Geist variable");
    font-size: var(--size-text-xs, 0.75rem);
    font-style: normal;
    font-weight: 400;
    line-height: var(--line-height-text-xs, 1.125rem); /* 150% */
  }

  .metric-cost {
    margin: 0;
    color: var(--colors-label-label-primary-900, #121926);
    font-variant-numeric: tabular-nums;

    /* Text xl/Semibold */
    font-family: var(--family-body, "Geist variable");
    font-size: var(--size-text-xl, 1.25rem);
    font-style: normal;
    font-weight: 600;
    line-height: var(--line-height-text-xl, 1.875rem); /* 150% */
  }
</style>

<script>
  const container = document.getElementById(
    "rev-increase-container",
  ) as HTMLElement;
  const operational = document.getElementById(
    `rev-metric-operational`,
  ) as HTMLElement;
  const server = document.getElementById(`rev-metric-server`) as HTMLElement;
  const saved = document.getElementById(`rev-metric-saved`) as HTMLElement;
  const time = 300; // ms

  const minOperational = 30; // $#k
  const maxOperational = 60; // $#k
  const minServer = 8; // $#k
  const maxServer = 20; // $#k
  const minSaved = 50; // $#k
  const maxSaved = 82; // $#k

  let operationalInterval: any = null;
  let serverInterval: any = null;
  let savedInterval: any = null;

  container.addEventListener("mouseover", () => {
    clearInterval(operationalInterval);
    clearInterval(serverInterval);
    clearInterval(savedInterval);
    let operationalPercentage = maxOperational;
    let serverPercentage = maxServer;
    let savedPercentage = minSaved;
    operationalInterval = setInterval(
      () => {
        operationalPercentage--;
        operational.textContent = `$${operationalPercentage}k`;
        if (operationalPercentage <= minOperational) {
          clearInterval(operationalInterval);
        }
      },
      time / (maxOperational - minOperational),
    );
    serverInterval = setInterval(
      () => {
        serverPercentage--;
        server.textContent = `$${serverPercentage}k`;
        if (serverPercentage <= minServer) {
          clearInterval(serverInterval);
        }
      },
      time / (maxServer - minServer),
    );
    savedInterval = setInterval(
      () => {
        savedPercentage++;
        saved.textContent = `$${savedPercentage}k`;
        if (savedPercentage >= maxSaved) {
          clearInterval(savedInterval);
        }
      },
      time / (maxSaved - minSaved),
    );
  });
  container.addEventListener("mouseout", () => {
    clearInterval(operationalInterval);
    clearInterval(serverInterval);
    clearInterval(savedInterval);
    let operationalPercentage = minOperational;
    let serverPercentage = minServer;
    let savedPercentage = maxSaved;
    operationalInterval = setInterval(
      () => {
        operationalPercentage++;
        operational.textContent = `$${operationalPercentage}k`;
        if (operationalPercentage >= maxOperational) {
          clearInterval(operationalInterval);
        }
      },
      time / (maxOperational - minOperational),
    );
    serverInterval = setInterval(
      () => {
        serverPercentage++;
        server.textContent = `$${serverPercentage}k`;
        if (serverPercentage >= maxServer) {
          clearInterval(serverInterval);
        }
      },
      time / (maxServer - minServer),
    );
    savedInterval = setInterval(
      () => {
        savedPercentage--;
        saved.textContent = `$${savedPercentage}k`;
        if (savedPercentage <= minSaved) {
          clearInterval(savedInterval);
        }
      },
      time / (maxSaved - minSaved),
    );
  });
</script>
