---
import styles from "./waves.module.scss";

interface Props {
  className?: string | undefined;
}

const { className = "" } = Astro.props;
---

<div class={`${className} ${styles.container}`}>
  <canvas
    data-is-wave="true"
    style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none;"
  ></canvas>
  <img
    style="position: fixed; top: 100px; right: 300px; transform: translateX(100%);"
    src="/wave.svg"
    alt=""
  />
  <img
    style="position: fixed; top: 400px; right: 300px; transform: translateX(100%);"
    src="/wave.svg"
    alt=""
  />
  <img
    style="position: fixed; top: 700px; right: 300px; transform: translateX(100%);"
    src="/wave.svg"
    alt=""
  />
  <img
    style="position: fixed; top: 100px; left: 300px; transform: scaleX(-1) translateX(100%);"
    src="/wave.svg"
    alt=""
  />
  <img
    style="position: fixed; top: 400px; left: 300px; transform: scaleX(-1) translateX(100%);"
    src="/wave.svg"
    alt=""
  />
  <img
    style="position: fixed; top: 700px; left: 300px; transform: scaleX(-1) translateX(100%);"
    src="/wave.svg"
    alt=""
  />
</div>

<script>
  import { WaveCanvas } from "./wave-canvas";

  document.querySelectorAll(`canvas[data-is-wave="true"]`).forEach((canvas) => {
    const waveConfigs = [
      // Right waves
      { type: "right", x: -300, y: 100, scale: 1, delay: 0 },
      { type: "right", x: -300, y: 400, scale: 1, delay: 0.3 },
      { type: "right", x: -300, y: 700, scale: 1, delay: 0.6 },
      // Left waves
      { type: "left", x: 300, y: 100, scale: 1, delay: 0.2 },
      { type: "left", x: 300, y: 400, scale: 1, delay: 0.5 },
      { type: "left", x: 300, y: 700, scale: 1, delay: 0.8 },
    ] as const;

    new WaveCanvas(canvas as HTMLCanvasElement, waveConfigs);
  });
</script>
